name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Dependency Scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json

  # Secret Scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # License Compliance
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-licenses
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -r requirements.txt

    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=plain --output-file=licenses.txt
        
        # Check for problematic licenses
        pip-licenses --format=json | python -c "
        import json, sys
        data = json.load(sys.stdin)
        problematic = ['GPL', 'AGPL', 'LGPL']
        found_issues = []
        for pkg in data:
            for prob in problematic:
                if prob in pkg.get('License', ''):
                    found_issues.append(f\"{pkg['Name']}: {pkg['License']}\")
        
        if found_issues:
            print('Problematic licenses found:')
            for issue in found_issues:
                print(f'  - {issue}')
            sys.exit(1)
        else:
            print('No problematic licenses found')
        "

    - name: Upload license report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: license-report
        path: |
          licenses.json
          licenses.txt

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t database-automation:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'database-automation:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'

  # SAST Scanning with Semgrep
  sast-scan:
    name: SAST Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/bandit
        generateSarif: "1"

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  # Security Policy Validation
  policy-check:
    name: Security Policy Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for security policy
      run: |
        if [ ! -f SECURITY.md ] && [ ! -f .github/SECURITY.md ]; then
          echo "Warning: No SECURITY.md file found"
          echo "Consider adding a security policy to help security researchers report vulnerabilities"
        else
          echo "Security policy found"
        fi

    - name: Check for dependency update automation
      run: |
        if [ ! -f .github/dependabot.yml ] && [ ! -f .dependabot/config.yml ]; then
          echo "Warning: No Dependabot configuration found"
          echo "Consider enabling Dependabot for automated dependency updates"
        else
          echo "Dependency update automation configured"
        fi

    - name: Validate Docker image security practices
      run: |
        # Check if Dockerfile follows security best practices
        if grep -q "USER.*root" Dockerfile; then
          echo "Warning: Running as root user in Docker"
        fi
        
        if ! grep -q "USER" Dockerfile; then
          echo "Warning: No non-root user specified in Dockerfile"
        fi
        
        if grep -q "ADD http" Dockerfile; then
          echo "Warning: Using ADD with HTTP URLs (use COPY instead)"
        fi
        
        echo "Docker security check completed"

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan, license-scan, container-scan, sast-scan, policy-check]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date)" >> security-summary.md
        echo "**Repository:** ${{ github.repository }}" >> security-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check job statuses
        echo "- **CodeQL Analysis:** ${{ needs.codeql.result }}" >> security-summary.md
        echo "- **Dependency Scan:** ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- **Secret Scan:** ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "- **License Scan:** ${{ needs.license-scan.result }}" >> security-summary.md
        echo "- **Container Scan:** ${{ needs.container-scan.result }}" >> security-summary.md
        echo "- **SAST Scan:** ${{ needs.sast-scan.result }}" >> security-summary.md
        echo "- **Policy Check:** ${{ needs.policy-check.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Next Steps" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review any findings in the GitHub Security tab" >> security-summary.md
        echo "2. Update dependencies if vulnerabilities are found" >> security-summary.md
        echo "3. Address any policy violations" >> security-summary.md
        echo "4. Monitor for new security advisories" >> security-summary.md
        
        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });